name: CI

on:
  # Compare the preceeding commit of main -> to the current commit of the main branch.
  # (Note: To compare changes between the last pushed commit to the remote main branch set `since_last_remote_commit: true`)
 push:
  branches: [ "main" ]
  paths:
    - 'content/en/**'

jobs:
  build:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.



      # Example 2
      - name: Get changed files in the en folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v35
        with:
          #separator: ","
          files: |
            content/en/**

      #- name: Run step if any file(s) in the en folder change
        #if: steps.changed-files-specific.outputs.any_changed == 'true'
        #run: |
          #echo "One or more files in the en folder has changed."
          #echo "List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}"
          #echo "loop start"
          #for file in ${{ steps.changed-files-specific.outputs.all_changed_files }}; do
              #echo $file
          #done
          
          #- name: Read file content
              #id: package
              #uses: juliangruber/read-file-action@v1
              #with:
                #path: ./${{ steps.changed-files-specific.outputs.all_changed_files }}
          #- name: Echo file content
              #run: echo "${{ steps.package.outputs.content }}"
              
          #echo "loop end"
          
      - name: get updated files
        run: |
          # This will check the modified .md files and get unique base paths for invalidation
          set +e
          FILES=($(git log --stat="1000" -1 | grep '|' | awk '{print "/"$1}' | grep -e '\.md$'))
          set -e
          [ -z "$FILES" ] && touch .updated_files && exit 0
          for file in $FILES; do
            p="$(dirname ${file})"
             echo $p | sed -e 's/\/content//' | sed -e 's/new-releases/*/' | sed -e 's/$/\//' | sed -e 's/\/\//\//' | sed -e 's/*\//*/'
          done | sort | uniq | tr '\n' ' ' > .updated_files
          
          echo echo "${{ .updated_files }}"
